{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { HttpService } from './http.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../providers/user-data\";\n/**\r\n * Classe de gestion des connexions\r\n */\n\nexport class ParticipantsHttpService {\n  /**\r\n   *\r\n   */\n  constructor(http, userData) {\n    this.http = http;\n    this.userData = userData;\n  }\n  /**\r\n   * Construction et envoi de la requette de connexion au serveur\r\n   */\n\n\n  getParticipants() {\n    let headers = new HttpHeaders({\n      \"Access-Control-Allow-Headers\": \"Content-Type, Authorization, Content-Length, X-Requested-With\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\"\n    }); // Création d'un post pour demander un login.\n\n    let body = {\n      authToken: this.userData.authToken\n    };\n    let apiUrl = HttpService.getAPIUrl();\n    let path = HttpService.getPathByWebServiceName('users');\n    let url = apiUrl + path;\n    let jSonCredential = JSON.stringify(body); // POST de la requette \t\n\n    return this.http.get(url, {\n      headers: headers,\n      params: body\n    });\n  }\n  /**\r\n   * Construction et envoi de la requette de connexion au serveur\r\n   *     async addParticipant(authToken: AuthToken, projectId: number, email: string, name: string, company: string, jobTitle: string, role: ParticipantRole): Promise<ProjectParticipant>\r\n     */\n\n\n  addParticipant(projectId, email, name, company, jobTitle, role) {\n    let headers = new HttpHeaders({\n      \"Access-Control-Allow-Headers\": \"Content-Type, Authorization, Content-Length, X-Requested-With\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\"\n    }); // Création d'un post pour demander un login.\n\n    let body = {\n      authToken: this.userData.authToken,\n      projectId: projectId,\n      email: email,\n      name: name,\n      company: company,\n      jobTitle: jobTitle,\n      role: role\n    };\n    let apiUrl = HttpService.getAPIUrl();\n    let path = HttpService.getPathByWebServiceName('user');\n    let url = apiUrl + path;\n    let jSonCredential = JSON.stringify(body); // POST de la requette \t\n\n    return this.http.post(url, body, {\n      headers: headers\n    });\n  }\n\n}\n\nParticipantsHttpService.ɵfac = function ParticipantsHttpService_Factory(t) {\n  return new (t || ParticipantsHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserData));\n};\n\nParticipantsHttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ParticipantsHttpService,\n  factory: ParticipantsHttpService.ɵfac\n});","map":{"version":3,"sources":["C:/Dev/Test3/archipad/src/app/services/participantsHttp.service.ts"],"names":["HttpHeaders","HttpService","i0","i1","i2","ParticipantsHttpService","constructor","http","userData","getParticipants","headers","body","authToken","apiUrl","getAPIUrl","path","getPathByWebServiceName","url","jSonCredential","JSON","stringify","get","params","addParticipant","projectId","email","name","company","jobTitle","role","post","ɵfac","ParticipantsHttpService_Factory","t","ɵɵinject","HttpClient","UserData","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport { HttpService } from './http.service';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../providers/user-data\";\r\n/**\r\n * Classe de gestion des connexions\r\n */\r\nexport class ParticipantsHttpService {\r\n    /**\r\n     *\r\n     */\r\n    constructor(http, userData) {\r\n        this.http = http;\r\n        this.userData = userData;\r\n    }\r\n    /**\r\n     * Construction et envoi de la requette de connexion au serveur\r\n     */\r\n    getParticipants() {\r\n        let headers = new HttpHeaders({\r\n            \"Access-Control-Allow-Headers\": \"Content-Type, Authorization, Content-Length, X-Requested-With\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n        // Création d'un post pour demander un login.\r\n        let body = {\r\n            authToken: this.userData.authToken,\r\n        };\r\n        let apiUrl = HttpService.getAPIUrl();\r\n        let path = HttpService.getPathByWebServiceName('users');\r\n        let url = apiUrl + path;\r\n        let jSonCredential = JSON.stringify(body);\r\n        // POST de la requette \t\r\n        return this.http.get(url, { headers: headers, params: body });\r\n    }\r\n    /**\r\n     * Construction et envoi de la requette de connexion au serveur\r\n     *     async addParticipant(authToken: AuthToken, projectId: number, email: string, name: string, company: string, jobTitle: string, role: ParticipantRole): Promise<ProjectParticipant>\r\n\r\n     */\r\n    addParticipant(projectId, email, name, company, jobTitle, role) {\r\n        let headers = new HttpHeaders({\r\n            \"Access-Control-Allow-Headers\": \"Content-Type, Authorization, Content-Length, X-Requested-With\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n        // Création d'un post pour demander un login.\r\n        let body = {\r\n            authToken: this.userData.authToken,\r\n            projectId: projectId,\r\n            email: email,\r\n            name: name,\r\n            company: company,\r\n            jobTitle: jobTitle,\r\n            role: role\r\n        };\r\n        let apiUrl = HttpService.getAPIUrl();\r\n        let path = HttpService.getPathByWebServiceName('user');\r\n        let url = apiUrl + path;\r\n        let jSonCredential = JSON.stringify(body);\r\n        // POST de la requette \t\r\n        return this.http.post(url, body, { headers: headers, });\r\n    }\r\n}\r\nParticipantsHttpService.ɵfac = function ParticipantsHttpService_Factory(t) { return new (t || ParticipantsHttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserData)); };\r\nParticipantsHttpService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ParticipantsHttpService, factory: ParticipantsHttpService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}