{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Dev\\\\archipad\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nconst _mockAuthToken = {\n  auth: \"de2c038a-6105-4722-9838-0cdb11eb6602\"\n};\nexport class UserService {\n  login(login, password) {\n    return mockSendResult({\n      authToken: _mockAuthToken,\n      user: {\n        userId: 123,\n        login: \"laurent@bigsool.com\",\n        name: \"Laurent Wozniak\"\n      }\n    });\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)();\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n}); //=============================================================================\n\nexport var ParticipantRole;\n\n(function (ParticipantRole) {\n  ParticipantRole[\"OWNER\"] = \"owner\";\n  ParticipantRole[\"ADMIN\"] = \"admin\";\n  ParticipantRole[\"COLLABORATOR\"] = \"collaborator\";\n  ParticipantRole[\"WORKPACKAGE\"] = \"workpackage\";\n  ParticipantRole[\"GUEST\"] = \"guest\";\n})(ParticipantRole || (ParticipantRole = {}));\n\n;\nexport var ParticipantInvitationState;\n\n(function (ParticipantInvitationState) {\n  ParticipantInvitationState[\"PENDING\"] = \"pending\";\n  ParticipantInvitationState[\"ACTIVE\"] = \"active\";\n})(ParticipantInvitationState || (ParticipantInvitationState = {}));\n\n;\n;\nexport class ProjectParticipantService {\n  constructor() {\n    this._participantsMockStorage = [{\n      email: \"laurent@bigsool.com\",\n      name: \"Laurent Wozniak\",\n      company: \"Bigsool\",\n      jobTitle: \"Maitre d'oeuvre\",\n      projectId: 34567,\n      role: ParticipantRole.OWNER,\n      state: ParticipantInvitationState.ACTIVE\n    }, {\n      email: \"florian@bigsool.com\",\n      name: \"Florian Girardey\",\n      company: \"Bigsool\",\n      jobTitle: \"Maitre d'oeuvre\",\n      projectId: 34567,\n      role: ParticipantRole.COLLABORATOR,\n      state: ParticipantInvitationState.ACTIVE\n    }, {\n      email: \"thomas@bigsool.com\",\n      name: \"Thomas Dubois\",\n      company: \"Bigsool\",\n      jobTitle: \"Maitre d'oeuvre\",\n      projectId: 34567,\n      role: ParticipantRole.COLLABORATOR,\n      state: ParticipantInvitationState.PENDING\n    }, {\n      email: \"mic@mac.com\",\n      name: \"Mic Fast\",\n      company: \"Électricité Fast\",\n      jobTitle: \"Électricité\",\n      projectId: 34567,\n      role: ParticipantRole.WORKPACKAGE,\n      state: ParticipantInvitationState.ACTIVE\n    }, {\n      email: \"rick@gallant.com\",\n      name: \"Eric Gallant\",\n      company: \"Peinture Gallant\",\n      jobTitle: \"Peinture\",\n      projectId: 34567,\n      role: ParticipantRole.WORKPACKAGE,\n      state: ParticipantInvitationState.ACTIVE\n    }, {\n      email: \"gg@gg-plomberie.com\",\n      name: \"Guillaume Gonzales\",\n      company: \"Gonzales peinture\",\n      jobTitle: \"Plomberie\",\n      projectId: 34567,\n      role: ParticipantRole.WORKPACKAGE,\n      state: ParticipantInvitationState.ACTIVE\n    }, {\n      email: \"info@cesar-btp.com\",\n      name: \"JF Cesar\",\n      company: \"Cesar BTP\",\n      jobTitle: \"Terrassement\",\n      projectId: 34567,\n      role: ParticipantRole.WORKPACKAGE,\n      state: ParticipantInvitationState.PENDING\n    }];\n  }\n\n  getParticipants(authToken, projectId) {\n    if (authToken !== _mockAuthToken) {\n      return Promise.reject(new Error());\n    }\n\n    return mockSendResult(this._participantsMockStorage);\n  }\n\n  addParticipant(authToken, projectId, email, name, company, jobTitle, role) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (authToken !== _mockAuthToken) {\n        throw new Error();\n      }\n\n      const participant = {\n        email: email,\n        name: name,\n        company: company,\n        jobTitle: jobTitle,\n        projectId: projectId,\n        role: role,\n        state: ParticipantInvitationState.PENDING\n      };\n      yield mockSendResult(null);\n\n      _this._participantsMockStorage.push(participant);\n\n      return participant;\n    })();\n  }\n\n}\n\nProjectParticipantService.ɵfac = function ProjectParticipantService_Factory(t) {\n  return new (t || ProjectParticipantService)();\n};\n\nProjectParticipantService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectParticipantService,\n  factory: ProjectParticipantService.ɵfac,\n  providedIn: 'root'\n}); //=============================================================================\n\nfunction mockSendResult(result) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => result, 1000);\n  });\n}","map":{"version":3,"sources":["C:/Dev/archipad/src/app/classes/archipad-mock.ts"],"names":["i0","_mockAuthToken","auth","UserService","login","password","mockSendResult","authToken","user","userId","name","ɵfac","UserService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ParticipantRole","ParticipantInvitationState","ProjectParticipantService","constructor","_participantsMockStorage","email","company","jobTitle","projectId","role","OWNER","state","ACTIVE","COLLABORATOR","PENDING","WORKPACKAGE","getParticipants","Promise","reject","Error","addParticipant","participant","push","ProjectParticipantService_Factory","result","resolve","setTimeout"],"mappings":"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","sourcesContent":["import * as i0 from \"@angular/core\";\r\nconst _mockAuthToken = { auth: \"de2c038a-6105-4722-9838-0cdb11eb6602\" };\r\nexport class UserService {\r\n    login(login, password) {\r\n        return mockSendResult({\r\n            authToken: _mockAuthToken,\r\n            user: {\r\n                userId: 123,\r\n                login: \"laurent@bigsool.com\",\r\n                name: \"Laurent Wozniak\",\r\n            },\r\n        });\r\n    }\r\n}\r\nUserService.ɵfac = function UserService_Factory(t) { return new (t || UserService)(); };\r\nUserService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UserService, factory: UserService.ɵfac, providedIn: 'root' });\r\n//=============================================================================\r\nexport var ParticipantRole;\r\n(function (ParticipantRole) {\r\n    ParticipantRole[\"OWNER\"] = \"owner\";\r\n    ParticipantRole[\"ADMIN\"] = \"admin\";\r\n    ParticipantRole[\"COLLABORATOR\"] = \"collaborator\";\r\n    ParticipantRole[\"WORKPACKAGE\"] = \"workpackage\";\r\n    ParticipantRole[\"GUEST\"] = \"guest\";\r\n})(ParticipantRole || (ParticipantRole = {}));\r\n;\r\nexport var ParticipantInvitationState;\r\n(function (ParticipantInvitationState) {\r\n    ParticipantInvitationState[\"PENDING\"] = \"pending\";\r\n    ParticipantInvitationState[\"ACTIVE\"] = \"active\";\r\n})(ParticipantInvitationState || (ParticipantInvitationState = {}));\r\n;\r\n;\r\nexport class ProjectParticipantService {\r\n    constructor() {\r\n        this._participantsMockStorage = [\r\n            {\r\n                email: \"laurent@bigsool.com\",\r\n                name: \"Laurent Wozniak\",\r\n                company: \"Bigsool\",\r\n                jobTitle: \"Maitre d'oeuvre\",\r\n                projectId: 34567,\r\n                role: ParticipantRole.OWNER,\r\n                state: ParticipantInvitationState.ACTIVE\r\n            },\r\n            {\r\n                email: \"florian@bigsool.com\",\r\n                name: \"Florian Girardey\",\r\n                company: \"Bigsool\",\r\n                jobTitle: \"Maitre d'oeuvre\",\r\n                projectId: 34567,\r\n                role: ParticipantRole.COLLABORATOR,\r\n                state: ParticipantInvitationState.ACTIVE\r\n            },\r\n            {\r\n                email: \"thomas@bigsool.com\",\r\n                name: \"Thomas Dubois\",\r\n                company: \"Bigsool\",\r\n                jobTitle: \"Maitre d'oeuvre\",\r\n                projectId: 34567,\r\n                role: ParticipantRole.COLLABORATOR,\r\n                state: ParticipantInvitationState.PENDING\r\n            },\r\n            {\r\n                email: \"mic@mac.com\",\r\n                name: \"Mic Fast\",\r\n                company: \"Électricité Fast\",\r\n                jobTitle: \"Électricité\",\r\n                projectId: 34567,\r\n                role: ParticipantRole.WORKPACKAGE,\r\n                state: ParticipantInvitationState.ACTIVE\r\n            },\r\n            {\r\n                email: \"rick@gallant.com\",\r\n                name: \"Eric Gallant\",\r\n                company: \"Peinture Gallant\",\r\n                jobTitle: \"Peinture\",\r\n                projectId: 34567,\r\n                role: ParticipantRole.WORKPACKAGE,\r\n                state: ParticipantInvitationState.ACTIVE\r\n            },\r\n            {\r\n                email: \"gg@gg-plomberie.com\",\r\n                name: \"Guillaume Gonzales\",\r\n                company: \"Gonzales peinture\",\r\n                jobTitle: \"Plomberie\",\r\n                projectId: 34567,\r\n                role: ParticipantRole.WORKPACKAGE,\r\n                state: ParticipantInvitationState.ACTIVE\r\n            },\r\n            {\r\n                email: \"info@cesar-btp.com\",\r\n                name: \"JF Cesar\",\r\n                company: \"Cesar BTP\",\r\n                jobTitle: \"Terrassement\",\r\n                projectId: 34567,\r\n                role: ParticipantRole.WORKPACKAGE,\r\n                state: ParticipantInvitationState.PENDING\r\n            }\r\n        ];\r\n    }\r\n    getParticipants(authToken, projectId) {\r\n        if (authToken !== _mockAuthToken) {\r\n            return Promise.reject(new Error());\r\n        }\r\n        return mockSendResult(this._participantsMockStorage);\r\n    }\r\n    async addParticipant(authToken, projectId, email, name, company, jobTitle, role) {\r\n        if (authToken !== _mockAuthToken) {\r\n            throw new Error();\r\n        }\r\n        const participant = {\r\n            email: email,\r\n            name: name,\r\n            company: company,\r\n            jobTitle: jobTitle,\r\n            projectId: projectId,\r\n            role: role,\r\n            state: ParticipantInvitationState.PENDING\r\n        };\r\n        await mockSendResult(null);\r\n        this._participantsMockStorage.push(participant);\r\n        return participant;\r\n    }\r\n}\r\nProjectParticipantService.ɵfac = function ProjectParticipantService_Factory(t) { return new (t || ProjectParticipantService)(); };\r\nProjectParticipantService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProjectParticipantService, factory: ProjectParticipantService.ɵfac, providedIn: 'root' });\r\n//=============================================================================\r\nfunction mockSendResult(result) {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => result, 1000);\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}